MNEMONIC = 'vapor split boil profit feed rookie degree movie loyal typical vapor increase'
WEB3_PROVIDER_URI=HTTP://127.0.0.1:7545
SMART_CONTRACT_ADDRESS=0xd9145CCE52D386f254917e481eB44e9943F39138


# Imports
import streamlit as st
from dataclasses import dataclass
from typing import Any, List
from web3 import Web3
from dotenv import load_dotenv
load_dotenv("/Users/thunguyen/Documents/Fintech/project3/style.css")
load_dotenv("/Users/thunguyen/Documents/Fintech/project3/style.css")

w3 = Web3(Web3.HTTPProvider("HTTP://127.0.0.1:7545"))



from crypto import generate_account, get_balance, send_transaction


products_database = {
    "Paper": [
        "Paper",
        "1",
        0.2,
        "/Users/thunguyen/Documents/Fintech/project3/pictures/pic2.jpeg",
    ],
    "Plastic": [
        "Plastic",
        "1",
        0.4,
        "/Users/thunguyen/Documents/Fintech/project3/pictures/pic2plastic.jpeg",
    ],
    "Glass bottles": [
        "Glass bottle",
        "1",
        0.2,
        "/Users/thunguyen/Documents/Fintech/project3/pictures/pic3glass.jpeg",
    ],
    "Mental": [
        "Mental",
        "1",
        0.2,
        "/Users/thunguyen/Documents/Fintech/project3/pictures/pic4mental.jpeg",
    ],
     "Textile": [
        "Textile",
        "1",
        0.4,
        "/Users/thunguyen/Documents/Fintech/project3/pictures/pic5textile.jpeg",
    ],
     "Electronics": [
        "Electronic",
        "1",
        0.2,
        "/Users/thunguyen/Documents/Fintech/project3/pictures/pic6electronics.jpeg",
    ],
}

# A list of the product types
recycle_types = ["Paper", "Plastic", "Glass bottles", "Mentals", "Textile", "Electronics"]

sidebar_items = ["Home", "About", "Contact"]


def get_products():

    """Display the database of products information."""
    db_list = list(products_database.values())

    for number in range(len(recycle_types)):
        st.image(db_list[number][3], width=200)
        st.write("## Types: ", db_list[number][0])
        st.write("Unit: ", db_list[number][1], "kg")
        st.write("Token Earned: ", db_list[number][2])
        st.text(" \n")

# Streamlit application headings
st.title("Recycle2Earn!")

st.write("## Help Reutilize Waste and Get Paid!")

st.text(" \n")

#Streamlit application style
st.markdown('<style>' + open('/Users/thunguyen/Documents/Fintech/project3/style.css').read() + '</style>', unsafe_allow_html=True)


################################################################################
# Streamlit Sidebar Code - Start

st.sidebar.markdown("## Product Account Address and Ethernet Balance in Ether")

account = generate_account()

st.sidebar.write(account.address)

balance = st.sidebar.write(get_balance(w3, account.address))

person = st.sidebar.selectbox("Select Recycle Types", recycle_types)

amount = st.sidebar.number_input("Amount of Material in kilograms")

st.sidebar.markdown("### Product Types, and Ethereum Address")

# Identify the product types
products = products_database[person][0]

# Write the products name to the sidebar
st.sidebar.write(products)

# Identify the token earned
token_earned = products_database[person][3]

# Write the token earned to the sidebar
st.sidebar.write(token_earned)

# Identify the Products Types Ethereum Address
products_address = products_database[person][1]

# Write the inTech Finder products' Ethereum Address to the sidebar
st.sidebar.write(products_address)

# Write the products' name to the sidebar

st.sidebar.markdown("## Total Token in Ether")


total = products_database[person][3]*amount


# Write the `wage` calculation to the Streamlit sidebar
st_total = st.sidebar.write(amount)



if st.sidebar.button("RECYCLE!"):

    
    transaction_hash = send_transaction(w3, account, products_address, total)

    # Markdown for the transaction hash
    st.sidebar.markdown("#### Validated Transaction Hash")

    # Write the returned transaction hash to the screen
    st.sidebar.write(transaction_hash)

    # Celebrate your successful payment
    st.balloons()


get_products()

